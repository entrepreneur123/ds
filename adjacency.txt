/*Program to represent a graph by using adjacency matrix*/
#include<stdio.h>
#include<conio.h>
int read_graph(int adj_mat[50][50],int n)
{
    int i,j;
    char reply;
    for(i=1;i<=n;i++)
    {
        for(j=1;j<=n;j++)
        {
            if(i==j)
            {
                adj_mat[i][j]=0;
                continue;
            }
            printf("\nVertices %d and %d are adjecent?(Y/N):",i,j);
            fflush(stdin);
            scanf("%c",&reply);
            if(reply=='Y'||reply=='y')
            adj_mat[i][j]=1;
            else
            adj_mat[i][j]=0;
        }
    }
}
void dir_graph()
{
    int adj_mat[50][50];
    int n;
    int in_deg,out_deg,i,j;
    printf("Enter the number of vertices: ");
    scanf("%d",&n);
    read_graph(adj_mat,n);
    printf("\nVertex\tIN-Degree\tOut-Degree\tTotal_degree");
    for(i=1;i<=n;i++)
    {
        in_deg=out_deg=0;
        for(j=1;j<=n;j++)
        {
            if(adj_mat[j][i]==1)
            in_deg++;
        }
        for(j=1;j<=n;j++)
        {
            if(adj_mat[i][j]==1)
            out_deg++;
        }
        printf("\n\n%d\t\t%d\t\t%d\t\t%d\n\n",i,in_deg,out_deg,in_deg,out_deg);
    }
}
void undir_graph()
{
    int adj_mat[50][50];
    int deg,i,j,n;
    printf("\nHow many vertices?:");
    scanf("%d",&n);
    read_graph(adj_mat,n);
    printf("\nVertex\tDegree");
    for(i=1;i<=n;i++)
    {
        deg=0;
        for(j=1;j<=n;j++)
        if(adj_mat[i][j]==1)
        deg++;
        printf("\n\n%d\t\t%d\n\n",i,deg);
    }
}
int main()
{
    int option;
    do
    {
        printf("\nProgram to represent a graph by using an ");
        printf("Adjacency Matrix method\n");
        printf("\n1.Directed Graph");
        printf("\n2.Undirected Graph");
        printf("\n3.Exit");
        printf("\n\nSelect a proper option:");
        scanf("%d",&option);
        switch(option)
        {
            case 1:
                dir_graph();
                break;
            case 2:
                undir_graph;
                break;
            case 3:
                break;
        }
    }while(1);
    return 0;
}